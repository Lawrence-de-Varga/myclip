#!/usr/bin/env python3
from sys import argv
import pyperclip 
import menus as m
from decorators import should_i_exit
import json

########################### Data Setup #########################################################################
# Collects saved phrases into the phrases dict.
try:
    with open("/home/ldv/scripts/myclip/phrases.txt" ) as f:
        text = f.read()

    phrases = json.loads(text)

except json.decoder.JSONDecodeError:
    phrases = {}

def update_phrase_file():
    """Rewrites the phrases file any time the phrases dict is modified."""
    with open("/home/ldv/scripts/myclip/phrases.txt", 'w') as f:
        f.write(json.dumps(phrases))


########################### Phrase Actions #########################################################################

def select_key(action):
    """Presents and allows for the selection of a key or keys by the user."""
    return m.select_options_wrap(list(phrases.keys()), 'phrase', action, every=False)

def key_error(key):
    print(f"Sorry \"{key}\" is not a valid key.")


def add_phrase(phrase):
    """ Adds a new phrase to the dict and the phrases file, allows for the overwirting of extant keys."""
    key = m.prompt("What would you like the key for the phrase to be?")

    if key in phrases.keys():
        print(f"\"{key}\" is already being used for another phrase.")
        action = m.select_options_wrap(['overwrite', 'change-key'], 'action', 'take', every=False)[0]

        if action == 'overwrite':
            phrases[key] = phrase
            update_phrase_file()
        elif action == 'change-key':
            add_phrase(phrase)
        else:
            return
    else:
        phrases[key] = phrase
        update_phrase_file()

@should_i_exit(phrases)
def modify_phrase(keys):
    """Allows for the modification of a phrase."""
    for key in keys:
        if key not in list(phrases.keys()):
            key_error(key)
        else:
            print(f"Modifying {key}")
            new_phrase = m.prompt("What would you like the phrase to be changed to?")
            phrases[key] = new_phrase

    update_phrase_file()

def modify_key(keys):
    for key in keys:
        try:
            print(f"Modifying {key}.")
            add_phrase(phrases[key])
            phrases.pop(key)
            update_phrase_file()
        except KeyError:
            key_error(key)

    
@should_i_exit(phrases)
def select_phrase(key):
    """ Copies a phrase to the users clipboard for use elsewhere."""
    try:
        pyperclip.copy(phrases[key[0]])
    except KeyError:
        key_error(key[0])

@should_i_exit(phrases)
def delete_phrase(keys):
    """Deletes any number of keys supplied by the user."""
    for key in keys: 
        try:
            phrases.pop(key)
        except KeyError:
            key_error(key)
            return

    update_phrase_file()

# longest_key is used to neatly format the phrases when displayed to the user.
try:
    longest_key = len(sorted(list(phrases.keys()), key=len)[-1])
except IndexError:
    longest_key = 0

@should_i_exit(phrases)
def print_phrases(keys):
    """ Allows for the selection and displaty of any number of phrases."""
    for key in keys:
        try: 
            print(f"{key.ljust(longest_key)} - corresponds to this phrase: {phrases[key]}")
        except KeyError:
            key_error(key) 

    print()

########################### Auxilliary Functions #########################################################################

def help():
    print("Run with no options to go to the main menu.")
    print("Use -s [key] to select a phrase.")
    print("Use -a [phrase] to add a phrase.")
    print("Use -m [key(s)] to modify any number of phrases.")
    print("Use -M [key(s)] to modify any number of keys.")
    print("Use -d [key(s)] to delete any number of phrases")
    print("Use -p to select phrases to display.")
    print("Use -p [key(s)] to display any number of  phrase.")
    print("Use -P to display all phrases.")
    print("use -h to print this help text.")

def menu():

    run = True

    while run:
        action = m.select_options_wrap(['select', 'add', 'modify', 'modify-key', 'delete', 'display'], 'action', 'take', every=False)[0]

        if action == 'select':
            select_phrase(select_key('select'))
        elif action == 'add':
            add_phrase(m.prompt("What phrase would you like to add?"))
        elif action == 'modify':
            modify_phrase(select_key('modify'))
        elif action == 'modify-key':
            modify_key(m.select_options_wrap(list(phrases.keys()), 'key(s)', 'modify'))
        elif action == 'delete':
            delete_phrase(select_key('delete'))
        elif action == 'display':
            print_phrases(m.select_options_wrap(list(phrases.keys()), 'phrase', 'display'))
        elif action == 'exit':
            print("Goodbye.")
            run = False
        else:
            print(f"Sorry \"{action}\" is not an option.")

# func_dict is used in the processing of user supplied command line options
func_dict = {'-s' : ["select_phrase(select_key('select'))", "select_phrase([argv[2]])"], 
             '-a' : ["add_phrase(m.prompt('What phrase would you like to add?'))", "add_phrase(' '.join(argv[2:]))"],
             '-m' : ["modify_phrase(select_key('modify'))", "modify_phrase(argv[2:])"],
             '-M' : ["modify_key(m.select_options_wrap(list(phrases.keys()), 'key(s)', 'modify'))",
                     "modify_key(argv[2:])"],
             '-d' : ["delete_phrase(select_key('delete'))", "delete_phrase(argv[2:])"],
             '-p' : ["print_phrases(select_key('display'))", "print_phrases(argv[2:])"],
             '-P' : ["print_phrases(list(phrases.keys()))"],
             '-h' : ["help()"]}


def process_argv():
    """ Processes the command line arguments supplied by the user."""
    if len(argv) == 2:
        try: 
            eval(func_dict[argv[1]][0])
        except KeyError:
            print(f"Sorry \"{argv[1]}\" is not a valid argument. Use -h to see options.")
    elif len(argv) >= 3:
        try:
            eval(func_dict[argv[1]][1])
        except KeyError:
            print(f"Sorry \"{argv[1]}\" is not a valid argument. Use -h to see options.")
    else:
        menu()

process_argv()









